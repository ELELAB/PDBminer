import pandas as pd
import os
import numpy as np
from sys import exit

configfile: 'config.yaml'

path = config['path']

#importing the file
df = pd.read_csv(path+"/"+config['input_file']) 

def check_input_file(df):

    problems = []
    
    for i in range(len(df)):
        if type(df.hugo_name[i]) != str:
            problems.append(f"there is a problem with the input on the line of {df.loc[i]['hugo_name']}")
        if type(df.uniprot[i]) != str:
            problems.append(f"there is a problem with the uniprot input on the line of {df.loc[i]['hugo_name']}")
        
        if ('uniprot_isoform' in df.columns) == True:
            try:
                int(df.uniprot_isoform[i])
            except ValueError:
                problems.append(f"there is a problem with the isoform input on the line of {df.loc[i]['hugo_name']}")
        else:
            uniprot_isoform = [1] * len(df) 
            df['uniprot_isoform'] = uniprot_isoform
        
        if ('mutations' in df.columns) == True:
            if type(df.mutations[i]) != str:
                problems.append(f"there is a problem with the mutation input on the line of {df.loc[i]['hugo_name']}")
        else:
            mutations = ['N/A'] * len(df)
            df['mutations'] = mutations
            
        if ('cluster_id' in df.columns) == True:
            if len(set(df.cluster_id)) == 1 and df.cluster_id[0] == "N/A":
                df.cluster_id = 999
            try:
                int(df.cluster_id[i])
            except ValueError:
                problems.append(f"there is a problem with the cluster_id input on the line of {df.loc[i]['hugo_name']}") 
        else: 
            cluster_id = [999] * len(df)
            df['cluster_id'] = cluster_id
    
    if len(problems) > 0:
        print(f"ERROR: The input file is not correctly formated. {problems}. Exiting...")
        exit(1)
    
    return df

df = check_input_file(df)

#creating the uniprot list
uniprot_list = list(set(df.uniprot))

#creating the results directory
if os.path.exists(path+"/results") == False: 
    os.mkdir(path+"/results")                    

target = expand("{path}/results/{uniprot_id}/{uniprot_id}_done.txt", uniprot_id=uniprot_list, path=path)                   

rule all:
    input:
        target     

#works as intended
rule prepare_files_and_dirs:
    input:
        "{path}"
    output:
        "{path}/results/{uniprot_id}/{uniprot_id}_input.csv"
    run:
        os.chdir(f"{input}/results")
        
        for uniprot_id in uniprot_list:
            if os.path.exists(uniprot_id) == False:
                os.mkdir(uniprot_id)
                os.chdir(uniprot_id)
            else:
                os.chdir(uniprot_id)
            
            uniprot_dataframe = df[df.uniprot == uniprot_id]        
            uniprot_dataframe = uniprot_dataframe.reset_index(drop=True)
            uniprot_dataframe.to_csv(f"{uniprot_id}_input.csv")
            os.chdir(f"{input}/results")

rule run_PDBminer:
    input:  
        "{path}/results/{uniprot_id}/{uniprot_id}_input.csv"
    output:    
        "{path}/results/{uniprot_id}/{uniprot_id}_done.txt"
    script:
        "scripts/PDBminer_run.py"
