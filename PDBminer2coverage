#!/usr/bin/env python3

# Copyright (C) 2022, Kristine Degn
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


#coverage and mutation coverage
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import requests
from Bio import SeqIO
from io import StringIO
import os
import seaborn as sns
import math
from matplotlib.colors import ListedColormap
import argparse
import re

parser = argparse.ArgumentParser(prog = "PDBminer2coverage",
                                 usage = "PDBminer2coverage [-h] help, all flags are optional: [-r] results path, [-i] input file, [-u] uniprot id, can be added if the user wish to visualize only one coverage, [-s] sequence, dash and comma separated values such as 1-10 or 1-20,30-40 for the sequence of the protein to plot, [-t] threshold, a integer of the sequence length to be placed in each individual plot, default is 500, why each plot is maximum 500 amino acid broad, [-c] color coverage, the plot is white and the coverage of each structure is colored in. Default is grey, but any color can be used, e.g '#64b2b5'. [-m] mutation color, is the overlay color on the sites of mutation. It is blue per default but any color can be used, e.g '#183233'")

parser.add_argument("-r", '--result',
                    metavar = 'result path',
                    type=str,
                    default = "./results/",
                    help='The path to the result path, deafault ./results')

parser.add_argument("-i", "--inputfile",
                    metavar = 'input file',
                    type=str,
                    default = "input_file.csv",
                    help="input file created in the PDBminer run or original file")

parser.add_argument("-u", "--uniprot",
                    metavar = 'uniprot',
                    default = "none",
                    type=str,
                    help="Uniprot id when multiple proteins are run")

parser.add_argument("-s", "--sequence",
                    metavar = "sequence",
                    type=str,
                    help="The area to be plotted, e.g., 1-200 or 1-20,50-66, comma seperated")

parser.add_argument("-t", "--threshold",
                    metavar = "theshold",
                    default = 500,
                    type=int,
                    help="Max number of residues plotted on the y-axis.")

parser.add_argument("-c", "--color_coverage",
                    metavar = "color for coverage",
                    default = "grey",
                    type=str,
                    help="plot color for coverage")

parser.add_argument("-m", "--color_mutations",
                    metavar = "color for mutations",
                    default = "blue",
                    type=str,
                    help="plot color for coverage")

parser.add_argument("-d", "--color_inherent_mutations",
                    metavar = "color for mutations in the PDBfile",
                    default = "lightgrey",
                    type=str,
                    help="plot color for mutations in the PDB")

args = parser.parse_args()

path = args.result
df = pd.read_csv(args.inputfile)

uniprot_id = args.uniprot
if uniprot_id != "none":
    df = df[df.uniprot == uniprot_id]
    df = df.reset_index()

threshold = args.threshold

cover_color = args.color_coverage
mutation_color = args.color_mutations
mutation_pdb = args.color_inherent_mutations

if args.sequence: 
    sequence = [int(s) for s in re.findall(r'\b\d+\b', args.sequence)]
    evens = [x for x in range(len(sequence)) if x%2 == 0]
    for number in evens:
        sequence[number] = sequence[number]-1
else:
    sequence = 0

print(args)

    
def get_uniprot_seq(isoform, uniprot_id):
    """
    Function with an API to Uniprot retriving the fasta file,
    to annotate the sequence.

    Parameters
    ----------
    isoform : The isoform from the PDBminer run.
    uniprot_id : The Uniprot ID, also taken from the input-file.

    Returns
    -------
    uniprot_numbering : A list of numbers annotating the positions of the protein
    columns : A list containing the WT amino acid and positions. 

    """
    
    uniprot_Url="https://rest.uniprot.org/uniprotkb/"
        
    #Alignment to correct isoform:
    if isoform == 1:
    
        fasta_url=uniprot_Url+uniprot_id+".fasta"
        response = requests.post(fasta_url)
        sequence_data=''.join(response.text)
        Seq=StringIO(sequence_data)
        pSeq=list(SeqIO.parse(Seq,'fasta'))
        uniprot_sequence = str(pSeq[0].seq)
        uniprot_numbering = list(range(1,len(uniprot_sequence)+1,1)) 
    
    else:
    
        fasta_url=uniprot_Url+uniprot_id+"-"+str(isoform)+".fasta"
        response = requests.post(fasta_url)
        sequence_data=''.join(response.text)
        Seq=StringIO(sequence_data)
        pSeq=list(SeqIO.parse(Seq,'fasta'))
        uniprot_sequence = str(pSeq[0].seq)
        uniprot_numbering = list(range(1,len(uniprot_sequence)+1,1)) 
    
    uniprot_sequence = list(uniprot_sequence)
    columns = []
    for i in range(len(uniprot_numbering)):
        columns.append(f"{uniprot_sequence[i]}{uniprot_numbering[i]}")
    
    return uniprot_numbering, columns

def get_ranges(coverage, uniprot_numbering): 
    """
    A function convating the reported coberage ranges of PDBminer
    to an array of 0 and 1s based on the entire uniprot sequence.
    Applicable for PDB structures.

    Parameters
    ----------
    coverage : From he PDBminer output file, all or filtered. 
    uniprot_numbering : The full numbering of the protein.

    Returns
    -------
    a : An array where the covered position is annotated 1 and the 
    not covered positions are annotated 0.

    """
    UN = np.array(uniprot_numbering)
    a = np.zeros(UN.shape)    
    for r in (("[", ""), ("]", ""), ("'", ""), ("(", ""), (")", "")): 
        coverage = coverage.replace(*r)
    if ";" in coverage:
        coverage = coverage.split(";")
    
        for segment in coverage: 
            if segment == "NA":
                continue
            else:
                segment = segment.split(", ")
                start = int(segment[0])
                stop = int(segment[1])
                segment_range = np.array(range(start,stop+1))            
                for j in range(len(segment_range)):
                    a[segment_range[j]-1] = 1
    else:
        if coverage == "NA":
            a = []
        else:
            coverage = coverage.split(", ")
            start = int(coverage[0])
            stop = int(coverage[1])
            coverage_range = np.array(range(start,stop+1))
            for j in range(len(coverage_range)):
                a[coverage_range[j]-1] = 1
    return a

def get_ranges_AF(coverage, uniprot_numbering):
    """
    A function convating the reported coberage ranges of PDBminer
    to an array of 0 and 1s based on the entire uniprot sequence.
    Applicable for Alphafold structures.

    Parameters
    ----------
    coverage : From he PDBminer output file, all or filtered. 
    uniprot_numbering : The full numbering of the protein.

    Returns
    -------
    a : An array where the covered position is annotated 1 and the 
    not covered positions are annotated 0.

    """
    UN = np.array(uniprot_numbering)
    a = np.zeros(UN.shape)
    for r in (("[", ""), ("]", ""), ("'", ""), ("(", ""), (")", "")): 
        coverage = coverage.replace(*r)
    coverage = coverage.split(";")
    for segment in coverage:
        if segment == "NA":
            continue
        else:
            c = segment.split(", ")
            start = int(c[0])
            stop = int(c[1])
            coverage_range = np.array(range(start,stop+1))
            for j in range(len(coverage_range)):
                a[coverage_range[j]-1] = 1 
    return a

def get_mutations(mutations_in_pdb, a_range): 
    """
    A function convating the reported coberage ranges of PDBminer
    to an array of 0 and 1s based on the entire uniprot sequence.
    Applicable for PDB structures.

    Parameters
    ----------
    coverage : From he PDBminer output file, all or filtered. 
    uniprot_numbering : The full numbering of the protein.

    Returns
    -------
    a : An array where the covered position is annotated 1 and the 
    not covered positions are annotated 0.

    """
    if mutations_in_pdb == [] or mutations_in_pdb == '[]':
        return a_range
    
    else:
        replacements = [("[", ""), ("]", ""), ("'", "")]
        mutations_in_pdb = [mutations_in_pdb := mutations_in_pdb.replace(a, b) for a, b in replacements]
        mutations_in_pdb = mutations_in_pdb[-1]
        mutations_in_pdb = mutations_in_pdb.split(", ")
        for i in range(len(mutations_in_pdb)):
            mutations_in_pdb[i] = int(mutations_in_pdb[i][1:-1])
        mutations_in_pdb = list(set(mutations_in_pdb))
    
        for j in range(len(mutations_in_pdb)):
            if a_range[mutations_in_pdb[j]-1] == 1:
                a_range[mutations_in_pdb[j]-1] = 2
            else:
                print("mutation outside coverage??")
            
        return a_range       

def plot_coverage(path, isoform, uniprot_id, mutations, cluster, file, name, sequence, threshold):
    """
    The plotting function, taking the output files from PDBminer and coverting 
    them into a plot.

    Parameters
    ----------
    path : The path to the relevant Uniprot ID folder in the results.
    isoform : From the input file of a particular protein.
    uniprot_id : From the input file of a particular protein.
    mutations : From the input file of a particular protein.
    cluster : From the input file of a particular protein.
    file : The PDBminer output file, either filtered or all
    name : Filtered or all
    sequence : User input of area to be plotted.

    Returns
    -------
    One or more plots of the coverage. The number of plots depends on the
    length of the protein (max 500 AA per plot), number of clusters and 
    availablity of a filtered and all file.

    """
    uniprot_numbering, columns = get_uniprot_seq(isoform, uniprot_id)

    print("    columns calculated imported from uniprot sequence")
    f = file[['structure_id', 'chains', 'coverage', 'mutations_in_pdb']]
    f = f[f["coverage"].str.contains("Mismatch") == False]
    f = f.reset_index()
    index = []
    ranges = []
    print("    converting ranges on chains to binary values")
    for i in range(len(f)):
        a = f.iloc[i]
        if len(a.chains) == 1:
            if a.structure_id.startswith('AF'):
                a_range = get_ranges_AF(a.coverage, uniprot_numbering)
                a_range = get_mutations(a.mutations_in_pdb, a_range)
                if np.array_equal(a_range, []) == False:
                    index.append(a.structure_id) 
                    ranges.append(a_range)
            else:
                a_range = get_ranges(a.coverage, uniprot_numbering)
                a_range = get_mutations(a.mutations_in_pdb, a_range)
                if np.array_equal(a_range, []) == False:
                    index.append(a.structure_id)
                    ranges.append(a_range)
        else:
            chains = a.chains.split(";")
            coverage = a.coverage.split("];[")
            mutations = a.mutations_in_pdb.split(";")
            for i in range(len(chains)):
                a_range = get_ranges(coverage[i], uniprot_numbering)
                
                if len(mutations) == 1:                      
                    a_range = get_mutations(mutations[0], a_range)
                else: 
                    a_range = get_mutations(mutations[i], a_range)
                if np.array_equal(a_range, []) == False:
                    index.append(f"{a.structure_id}_{chains[i]}")                
                    ranges.append(a_range)
    print("    combine to dataframe")
    heatmap = np.stack(ranges)
    df = pd.DataFrame(data=heatmap, index=index, columns=columns)
    
    if np.array_equal(sequence, 0) == False:
        if len(sequence) > 2:
            evens = [x for x in range(len(sequence)) if x%2 == 0]
            df_list = []
            for i in evens:
                df_list.append(df.iloc[: , sequence[i]:sequence[i+1]])
            df = pd.concat(df_list, axis=1, join="inner")
                
        else: 
            df = df.iloc[: , sequence[0]:sequence[1]]

    if type(mutations) == str:
        print("    finding mutational positions")
        mutations = mutations.split(";")
        for i in range(len(mutations)):
            mutations[i] = int(mutations[i][1:-1])
        mutational_positions = np.unique(np.array(mutations))
        print("    assigning new values to mutational positions")
        UN = np.array(uniprot_numbering)
        np_mut = np.zeros(UN.shape)
        if len(mutational_positions) == 1:
            np_mut[mutational_positions[0]-1] = 1.0
        else:
            for j in range(len(mutational_positions)-1):
                np_mut[mutational_positions[j]-1] = 1.0
        arrays = [np_mut for _ in range(len(df))]
        heatmap_mut = np.stack(arrays)
        df_mut = pd.DataFrame(data=heatmap_mut, index=index, columns=columns)
        print("    mutations assigned")
        if np.array_equal(sequence, 0) == False:
            if len(sequence) > 2:
                evens = [x for x in range(len(sequence)) if x%2 == 0]
                df_list = []
                for i in evens:
                    df_list.append(df_mut.iloc[: , sequence[i]:sequence[i+1]])
                df_mut = pd.concat(df_list, axis=1, join="inner")
                    
            else: 
                df_mut = df_mut.iloc[: , sequence[0]:sequence[1]]

    print("   plotting")

    length_threshold = threshold

    if len(df.columns) > length_threshold:
        print(f"    sequence > {length_threshold} AA, multiple plots")
        chunks = len(uniprot_numbering)/length_threshold
        chunks = math.ceil(chunks)            
        for i in range(chunks): 
            print(f"    plotting chunk {i+1} of {chunks}")
            df_chunk = df.iloc[:,i*length_threshold:(i*length_threshold)+length_threshold]
            fig, ax = plt.subplots(figsize=((len(df_chunk.columns)/6),(len(df_chunk.index)/4)))
            ax = sns.heatmap(df_chunk, vmin=0, vmax=2, cmap=ListedColormap(['white', cover_color, mutation_pdb]), linewidths=1, 
                        linecolor='black', cbar = False, xticklabels=True, yticklabels=True)
            try:
                df_mut_chunk = df_mut.iloc[:,i*length_threshold:(i*length_threshold)+length_threshold]
                ax = sns.heatmap(df_mut_chunk, vmin=0, vmax=2, cmap=ListedColormap(['white', cover_color, mutation_pdb]), alpha=0.15, cbar = False)
            except:
                df_mut = None
            
            ax.xaxis.tick_top()
            plt.xticks(rotation=90)
            if cluster == 999: 
                plt.savefig(f"{path}/{uniprot_id}/{name}_coverage_plot_chunk_{i}.pdf", format="pdf", bbox_inches="tight")
            else:
                plt.savefig(f"{path}/{uniprot_id}/{name}_coverage_plot_cluster{cluster}_chunk_{i}.pdf", format="pdf", bbox_inches="tight")
    else:
        print(f"    sequence < {length_threshold} AA, one plot")
        fig, ax = plt.subplots(figsize=((len(df.columns)/6),(len(df.index)/4)))
        ax = sns.heatmap(df, vmin=0, vmax=2, cmap=ListedColormap(['white', cover_color, mutation_pdb]), linewidths=1, 
                    linecolor='black', cbar = False, xticklabels=True, yticklabels=True)
        try:
            ax = sns.heatmap(df_mut, vmin=0, vmax=2, cmap=ListedColormap(['white', cover_color, mutation_pdb]), alpha=0.15, cbar = False)
        except:
            df_mut = None
        
        ax.xaxis.tick_top() 
        plt.xticks(rotation=90)
        if cluster == 999:
            plt.savefig(f"{path}/{uniprot_id}/{name}_coverage_plot.pdf", format="pdf", bbox_inches="tight")
        else:
            plt.savefig(f"{path}/{uniprot_id}/{name}_coverage_plot_cluster{cluster}.pdf", format="pdf", bbox_inches="tight")
    return

def run(df):
    """
    A run file to generate the plots based on the original input file.

    Parameters
    ----------
    df : Dataframe of the inputfile.

    Returns
    -------
    None.

    """
    for i in range(len(df)): 
        if os.path.isfile(f"{path}/{df.iloc[i].uniprot}/{df.iloc[i].uniprot}_filtered.csv"):
            print("  filtered file identified")
            filtered = pd.read_csv(f"{path}/{df.iloc[i].uniprot}/{df.iloc[i].uniprot}_filtered.csv")
            plot_coverage(path, df.iloc[i].uniprot_isoform, df.iloc[i].uniprot, 
                          df.iloc[i].mutations, df.iloc[i].cluster_id, filtered, 
                          "filtered", sequence, threshold)
            print("  plot done")
        elif os.path.isfile(f"{path}/{df.iloc[i].uniprot}/{df.iloc[i].uniprot}_cluster{df.iloc[i].cluster_id}_filtered.csv"):
            print("  filtered cluster file identified")
            filtered = pd.read_csv(f"{path}/{df.iloc[i].uniprot}/{df.iloc[i].uniprot}_cluster{df.iloc[i].cluster_id}_filtered.csv")
            plot_coverage(path, df.iloc[i].uniprot_isoform, df.iloc[i].uniprot, 
                          df.iloc[i].mutations, df.iloc[i].cluster_id, filtered, 
                          "filtered", sequence, threshold)
            print("  plot done")
        if os.path.isfile(f"{path}/{df.iloc[i].uniprot}/{df.iloc[i].uniprot}_all.csv"):
            print("  All file identified")
            full = pd.read_csv(f"{path}/{df.iloc[i].uniprot}/{df.iloc[i].uniprot}_all.csv")
            plot_coverage(path, df.iloc[i].uniprot_isoform, df.iloc[i].uniprot, 
                          df.iloc[i].mutations, df.iloc[i].cluster_id, full, 
                          "all", sequence, threshold)
            print("  plot done")
    return

run(df)

